using UnityEngine;
using System.Collections;

/// <summary>
/// Tutorial project.
/// Instantiate game objects.
/// Work with recursion.
/// Use coroutines.
/// Add randomness.
/// found at: http://catlikecoding.com/unity/tutorials/constructing-a-fractal/
/// </summary>
public class Fractal : MonoBehaviour
{
    /// <summary>
    /// the list of directions each child goes in.
    /// </summary>
    private static Vector3[] childDirections = {
        Vector3.up,
        Vector3.right,
        Vector3.left,
        Vector3.forward,
        Vector3.back
    };
    /// <summary>
    /// the rotation for each child
    /// </summary>
    private static Quaternion[] childOrientations = {
        Quaternion.identity,
        Quaternion.Euler(0f, 0f, -90f),
        Quaternion.Euler(0f, 0f, 90f),
        Quaternion.Euler(90f, 0f, 0f),
        Quaternion.Euler(-90f, 0f, 0f)
    };
    /// <summary>
    /// the scale of the child fractals.  set in the Unity editor
    /// </summary>
    public float childScale;
    /// <summary>
    /// the current depth of fractals generated.
    /// </summary>
    private int depth;
    /// <summary>
    /// the maximum depth of fractals generated.
    /// </summary>
    public int maxDepth = 4;
    /// <summary>
    /// Mechanically, a Mesh is a construct used by the graphics hardware to draw complex stuff. It's a 3D object that's either
    /// imported into Unity, of of Unity's default shapes, or generated by code.
    /// A mesh contains at least a collection of points in 3D space plus a set of triangles – the most basic 2D shapes – defined by these points.
    /// 
    /// this is a list of random meshes to assign to the new Fractal game objects.  The mesh shapes are assigned in the Unity Editor
    /// </summary>
    public Mesh[] meshes;
    /// <summary>
    /// Materials define the visual properties of objects. They can range from very simple, like a constant color, to very complex.
    /// Materials consist of a shader and whatever data the shader needs. Shaders are basically scripts that tell the graphics card
    /// how an object's polygons should be drawn.
    /// </summary>
    public Material material;
    private Material[,] materials;
    public float maxTwist;

    /// <summary>
    /// the probability a child will spawn.  set in the Unity editor for now
    /// </summary>
    public float spawnProbability;
    /// <summary>
    /// the maximum rotation speed
    /// </summary>
    public float maxRotationSpeed;
    /// <summary>
    /// the current rotation speead
    /// </summary>
    private float rotationSpeed;
    /// <summary>
    /// Creates two new game objects named fractal child, and assigns them a script component of class Fractal.
    /// Initialized through Initialize method
    /// </summary>
    /// <returns></returns>
    private IEnumerator CreateChildren()
    {
        for (int i = childDirections.Length - 1; i >= 0; i--)
        {
            if (Random.value < spawnProbability) // randomize spawning
            {
                // The yield statement is a special kind of return, that ensures that the function will continue from the 
                // line after the yield statement next time it is called.
                // yield is used in unity to script a sequence of events
                yield return new WaitForSeconds(Random.Range(0.1f, 0.5f));
                new GameObject("Fractal Child").AddComponent<Fractal>().Initialize(this, childDirections[i], childOrientations[i]);
            }
        }
    }
    /// <summary>
    /// Assign mesh, material from parent, and update depth fields.
    /// </summary>
    /// <param name="parent">the parent Fractal</param>
    /// <param name="direction">the direction the new Fractal is generated</param>
    private void Initialize(Fractal parent, Vector3 direction, Quaternion orientation)
    {
        meshes = parent.meshes;
        materials = parent.materials;
        maxDepth = parent.maxDepth;
        maxTwist = parent.maxTwist;
        depth = parent.depth + 1;
        childScale = parent.childScale;
        spawnProbability = parent.spawnProbability;
        // children rotate at 4/3 parent speed
        maxRotationSpeed = parent.maxRotationSpeed / 0.75f;
        // assign the Transform object's parent
        // a Transform object is seen in the Unity Editor.  A Transform object contains
        // a GameObject's Position, Rotation, and scal
        transform.parent = parent.transform;
        // set the new Fractal's scale relative to its parent
        transform.localScale = Vector3.one * childScale;
        // move the new Fractal up relative to its parent's location
        transform.localPosition = direction * (0.5f + 0.5f * childScale);
        transform.localRotation = orientation;
    }
    /// <summary>
    /// Initialize materials so all game objects at a single depth can share one instead of creating a new one each time.
    /// </summary>
    private void InitializeMaterials()
    {
        materials = new Material[maxDepth + 1, 2];
        for (int i = 0; i <= maxDepth; i++)
        {
            float t = i / (maxDepth - 1f);
            t *= t;
            materials[i, 0] = new Material(material);
            materials[i, 0].color = Color.Lerp(Color.white, Color.yellow, t);
            materials[i, 1] = new Material(material);
            materials[i, 1].color = Color.Lerp(Color.white, Color.cyan, t);
        }
        // set last depth to magenta
        materials[maxDepth, 0].color = Color.magenta;
        materials[maxDepth, 1].color = Color.red;
    }
    /// <summary>
    /// Start is called after the component is created.  It runs only once, during the first frame the object appears.
    /// </summary>
    void Start ()
    {
        if (materials == null)
        {
            InitializeMaterials();
        }
        // rotation speed is between pos and neg max speed
        rotationSpeed = Random.Range(-maxRotationSpeed, maxRotationSpeed);
        transform.Rotate(Random.Range(-maxTwist, maxTwist), 0f, 0f);
        // call the game component this script is attached to and assign it a mesh and material
        gameObject.AddComponent<MeshFilter>().mesh = meshes[Random.Range(0, meshes.Length)];
        gameObject.AddComponent<MeshRenderer>().material = materials[depth, Random.Range(0, 2)];
        if (depth < maxDepth)
        {
            // create a new game object named fractal child.
            // add a script component, of class Fractal.
            // initialize through Initialize method

            // When you're creating a coroutine in Unity, what you're really doing is creating an iterator. 
            // When you pass it to the StartCoroutine method, it will get stored and gets asked for its next item
            // every frame, until it is finished.

            //The yield statements produce the items. The statements in between – the stuff that you want to happen –
            // are side-effects of the iterator doing its job.

            // You can yield special things like WaitForSeconds to have more control over when your own code
            // continues, but the overall approach is simply that of an iterator.
            StartCoroutine(CreateChildren());
        }
    }
    /// <summary>
    /// Update this instance.  This method is invoked by the Unity engine, public or private.
    /// During an update, the clockś hands are rotated to match the current time.
    /// </summary>
    void Update () {
        // rotate the fractal along y-axis
        transform.Rotate(0f, rotationSpeed * Time.deltaTime, 0f);
    }
}
